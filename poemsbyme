<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>poems by me</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
        import { 
            getFirestore, 
            collection, 
            addDoc, 
            serverTimestamp, 
            orderBy, 
            limit, 
            onSnapshot, 
            query, 
            startAfter,
            getDocs 
        } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";
        
        // Your web app's Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyDqUz78QMjdtukQtRaomdggtWoWl1iSDI0",
            authDomain: "poemsbyme-4c899.firebaseapp.com",
            projectId: "poemsbyme-4c899",
            storageBucket: "poemsbyme-4c899.firebasestorage.app",
            messagingSenderId: "370824681051",
            appId: "1:370824681051:web:00f33528ba06dbd381917e",
            measurementId: "G-87CYSCZLFG"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        
        // Make Firebase available to the app without exposing globally
        window.firebaseApp = {
            db,
            firestore: {
                collection,
                addDoc,
                serverTimestamp,
                orderBy,
                limit,
                onSnapshot,
                query,
                startAfter,
                getDocs
            }
        };
    </script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><text x='12' y='18' font-size='20' text-anchor='middle'>üçÉ</text></svg>" type="image/svg+xml">    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html {
            scroll-behavior: smooth;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #45ffff8f 0%, #ffffff 100%);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px;
            color: #000000;
            animation: fadeIn 1s ease-out;
        }

        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .main-content {
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
            margin-bottom: 40px;
        }

        .form-section {
            flex: 1;
            min-width: 300px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.425);
            animation: slideInLeft 0.8s ease-out;
            position: relative;
            z-index: 1;
        }

        .form-section::before {
            content: '';
            position: absolute;
            top: 10px;
            left: 10px;
            right: -10px;
            bottom: -10px;
            background: rgba(0, 0, 0, 0.05);
            border-radius: 15px;
            z-index: -1;
            filter: blur(10px);
        }

        .notes-section {
            flex: 2;
            min-width: 300px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.425);
            animation: slideInRight 0.8s ease-out;
            position: relative;
            z-index: 1;
        }

        .notes-section::before {
            content: '';
            position: absolute;
            top: 10px;
            left: 10px;
            right: -10px;
            bottom: -10px;
            background: rgba(0, 0, 0, 0.05);
            border-radius: 15px;
            z-index: -1;
            filter: blur(10px);
        }

        h2 {
            margin-bottom: 20px;
            color: #000000;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #000000;
        }

        input, textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #000000;
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(0, 0, 0, 0.1);
        }

        input:focus, textarea:focus {
            border-color: #000000;
            outline: none;
            box-shadow: 0 0 0 3px rgba(52, 99, 255, 0.651);
        }

        textarea {
            min-height: 150px;
            max-height: 400px;
            resize: vertical;
            overflow-y: auto;
            line-height: 1.5;
        }

        /* Improved textarea scrolling */
        .textarea-container {
            position: relative;
        }

        .textarea-scroll-indicator {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #000000;
            font-size: 0.8rem;
            opacity: 0.7;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        textarea:focus ~ .textarea-scroll-indicator {
            opacity: 0;
        }

        button {
            background: rgba(0, 0, 0, 0.1);
            color: #000000;
            border: 2px solid #000000;
            padding: 12px 25px;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            background: rgba(0, 0, 0, 0.2);
        }

        button:active {
            transform: translateY(0);
        }

        /* Improved button disabled state */
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
            box-shadow: none !important;
        }

        .notes-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .journal-entry {
            background: rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(214, 77, 124, 0.1);
            transition: all 0.3s ease;
            animation: fadeIn 0.5s ease-out;
            position: relative;
            overflow: hidden;
            border-left: 4px solid #000000;
        }

        .journal-entry:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .entry-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .author {
            font-weight: 600;
            color: #000000;
        }

        .timestamp {
            font-size: 0.8rem;
            color: #000000;
        }

        .entry-content {
            line-height: 1.5;
            color: rgb(73, 9, 9);
            white-space: pre-wrap;
            word-break: break-word;
        }

        .entry-title {
            font-weight: 600;
            margin-bottom: 10px;
            color: #000000;
            font-size: 1.1rem;
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #000000;
            grid-column: 1 / -1;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 15px;
            color: #000000;
        }

        .empty-state p {
            font-size: 1.2rem;
            margin-bottom: 20px;
        }

        .character-count {
            text-align: right;
            font-size: 0.85rem;
            color: #000000;
            margin-top: 5px;
        }

        .limit-warning {
            color: #000000;
            font-weight: 500;
        }

        .pulse {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #000000;
            margin-right: 5px;
            animation: pulse 1.5s infinite;
        }

        footer {
            text-align: center;
            color: #000000;
            padding: 20px;
            opacity: 0.8;
            font-size: 0.9rem;
        }

        /* Search and Filter */
        .search-filter {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .search-box {
            flex: 1;
            min-width: 200px;
            position: relative;
        }

        .search-box i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #000000;
        }

        .search-box input {
            padding-left: 45px;
            background: rgba(0, 0, 0, 0.1);
        }

        .filter-select {
            min-width: 150px;
        }

        .filter-select select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #000000;
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            color: #000000;
            background: rgba(0, 0, 0, 0.1);
            cursor: pointer;
        }

        /* Lazy loading indicator */
        .lazy-loading {
            text-align: center;
            padding: 20px;
            grid-column: 1 / -1;
        }

        .lazy-loading .loader {
            display: inline-block;
            width: 30px;
            height: 30px;
            border: 3px solid rgba(255, 118, 166, 0.3);
            border-radius: 50%;
            border-top-color: #000000;
            animation: spin 1s ease-in-out infinite;
        }

        .no-more-posts {
            text-align: center;
            padding: 20px;
            grid-column: 1 / -1;
            color: #000000;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            animation: fadeIn 0.3s ease-out;
        }

        .modal-content {
            background: rgba(255, 255, 255, 0.527);
            border-radius: 15px;
            padding: 30px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            text-align: center;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }

        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 25px;
        }

        .modal-buttons button {
            min-width: 100px;
        }

        .modal-buttons button:last-child {
            background: rgba(0, 0, 0, 0.1);
            color: #555;
        }

        /* Loading animation */
        .loader {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: rgba(0, 0, 0, 0.1);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .error-message {
            background: #000000;
            color: rgb(255, 255, 255);
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            display: none;
        }
        
        /* Success message */
        .success-message {
            background: #4caf50;
            color: rgb(255, 255, 255);
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            display: none;
            animation: fadeIn 0.5s ease-out;
        }

        /* Full page loader */
        .full-page-loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            flex-direction: column;
            gap: 20px;
        }
        
        .full-page-loader .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #000000;
            border-radius: 50%;
            border-top-color: #000000;
            animation: spin 1s ease-in-out infinite;
        }
        
        .full-page-loader p {
            color: #000000;
            font-size: 1.2rem;
            font-weight: 500;
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideInLeft {
            from { 
                opacity: 0;
                transform: translateX(-30px);
            }
            to { 
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes slideInRight {
            from { 
                opacity: 0;
                transform: translateX(30px);
            }
            to { 
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes pulse {
            0% { transform: scale(0.95); opacity: 0.7; }
            50% { transform: scale(1.1); opacity: 1; }
            100% { transform: scale(0.95); opacity: 0.7; }
        }
        
        /* Toast notification */
        .toast {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            background: #4caf50;
            color: rgb(255, 255, 255);
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 10px;
            animation: fadeIn 0.3s ease-out, fadeOut 0.5s ease-in 2.5s forwards;
        }
        
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; visibility: hidden; }
        }

        /* Responsive adjustments */
        @media (max-width: 1024px) {
            .main-content {
                gap: 20px;
            }
            
            .notes-container {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .main-content {
                flex-direction: column;
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .form-section, .notes-section {
                width: 100%;
            }
            
            .notes-container {
                grid-template-columns: 1fr;
            }
            
            .search-filter {
                flex-direction: column;
            }
        }

        @media (max-width: 480px) {
            body {
                padding: 10px;
            }
            
            header {
                margin-bottom: 20px;
                padding: 10px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .subtitle {
                font-size: 1rem;
            }
            
            .form-section, .notes-section {
                padding: 15px;
            }
            
            .entry-header {
                flex-direction: column;
                gap: 5px;
            }
            
            .modal-content {
                padding: 20px;
            }
            
            .modal-buttons {
                flex-direction: column;
            }
            
            .toast {
                width: 90%;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <!-- Full page loader -->
    <div class="full-page-loader" id="fullPageLoader">
        <div class="spinner"></div>
        <p>Loading...</p>
    </div>

    <div class="container">
        <header>
            <br>
            <h1>poems by me</h1>
            <p class="subtitle">miserable every day</p>
        </header>

        <div class="main-content">
            <section class="form-section">
                <h2><i class="fas fa-book-open"></i>New Journal Entry</h2>
                <div class="form-group">
                    <label for="name">Entry Title</label>
                    <input type="text" id="name" placeholder="What's on your mind today?" maxlength="50">
                </div>
                <div class="form-group">
                    <label for="note">Your Thoughts</label>
                    <div class="textarea-container">
                        <textarea id="note" placeholder="Write about your day, feelings, or anything you want to remember..." maxlength="10000"></textarea>
                        <div class="textarea-scroll-indicator">
                            <i class="fas fa-arrows-alt-v"></i>
                        </div>
                    </div>
                    <div class="character-count"><span id="charCount">0</span>/10000 characters</div>
                </div>
                <button id="submitBtn">
                    <i class="fas fa-paper-plane"></i> Save Entry
                </button>
                <div id="errorMessage" class="error-message"></div>
                <div id="successMessage" class="success-message"></div>
            </section>

            <section class="notes-section">
                <h2><span class="pulse"></span> Journal Entries <span id="noteCount">0</span></h2>
                
                <div class="search-filter">
                    <div class="search-box">
                        <i class="fas fa-search"></i>
                        <input type="text" id="searchInput" placeholder="Search entries...">
                    </div>
                    <div class="filter-select">
                        <select id="filterSelect">
                            <option value="all">All Entries</option>
                            <option value="recent">Recent First</option>
                            <option value="oldest">Oldest First</option>
                        </select>
                    </div>
                </div>
                
                <div id="notesContainer" class="notes-container">
                    <div class="empty-state">
                        <i class="fas fa-book"></i>
                        <p>No journal entries yet.</p>
                        <p>Start writing your first entry above!</p>
                    </div>
                </div>
                
                <div class="lazy-loading" id="lazyLoading" style="display: none;">
                    <div class="loader"></div>
                    <p>Loading more entries...</p>
                </div>
                
                <div class="no-more-posts" id="noMorePosts" style="display: none;">
                    <p><i class="fas fa-check-circle"></i> All entries loaded</p>
                </div>
            </section>
        </div>

        <footer>
            <p>üçÉ 2025</p>
        </footer>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal" id="confirmationModal">
        <div class="modal-content">
            <h2><i class="fas fa-question-circle"></i> Save Entry</h2>
            <p>Are you sure you want to save this journal entry?</p>
            <div class="modal-buttons">
                <button id="confirmPostBtn">Yes, Save It</button>
                <button id="cancelPostBtn">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // DOM elements
        const nameInput = document.getElementById('name');
        const noteInput = document.getElementById('note');
        const submitBtn = document.getElementById('submitBtn');
        const notesContainer = document.getElementById('notesContainer');
        const charCount = document.getElementById('charCount');
        const noteCount = document.getElementById('noteCount');
        const errorMessage = document.getElementById('errorMessage');
        const successMessage = document.getElementById('successMessage');
        const searchInput = document.getElementById('searchInput');
        const filterSelect = document.getElementById('filterSelect');
        const confirmationModal = document.getElementById('confirmationModal');
        const confirmPostBtn = document.getElementById('confirmPostBtn');
        const cancelPostBtn = document.getElementById('cancelPostBtn');
        const fullPageLoader = document.getElementById('fullPageLoader');
        const lazyLoading = document.getElementById('lazyLoading');
        const noMorePosts = document.getElementById('noMorePosts');

        // App state
        let allEntries = [];
        let filteredEntries = [];
        let debounceTimer;
        let unsubscribe;
        let lastVisible = null;
        let hasMoreData = true;
        let isLoading = false;
        let isInitialLoad = true;
        let scrollThrottleTimer;

        // Character count for textarea
        noteInput.addEventListener('input', () => {
            const count = noteInput.value.length;
            charCount.textContent = count;
            
            if (count > 450) {
                charCount.classList.add('limit-warning');
            } else {
                charCount.classList.remove('limit-warning');
            }
        });

        // Show error message
        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
            setTimeout(() => {
                errorMessage.style.display = 'none';
            }, 5000);
        }
        
        // Show success message
        function showSuccess(message) {
            successMessage.textContent = message;
            successMessage.style.display = 'block';
            setTimeout(() => {
                successMessage.style.display = 'none';
            }, 5000);
        }
        
        // Show toast notification
        function showToast(message) {
            // Remove existing toast if any
            const existingToast = document.querySelector('.toast');
            if (existingToast) {
                existingToast.remove();
            }
            
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.innerHTML = `<i class="fas fa-check-circle"></i> ${message}`;
            document.body.appendChild(toast);
            
            // Remove toast after animation completes
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 3000);
        }
        
        // Show loading state
        function showLoading() {
            notesContainer.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading your journal...</p>
                </div>
            `;
        }

        // Sanitize input to prevent XSS
        function sanitizeInput(input) {
            const div = document.createElement('div');
            div.textContent = input;
            return div.innerHTML;
        }

        // Add entry to Firestore
        async function postEntry() {
            const title = sanitizeInput(nameInput.value.trim());
            const content = sanitizeInput(noteInput.value.trim());
            
            if (title === '' || content === '') {
                showError('Please enter both a title and journal content');
                confirmationModal.style.display = 'none';
                return;
            }
            
            // Add a new document with a generated id
            try {
                submitBtn.innerHTML = '<div class="loader"></div> Saving...';
                submitBtn.disabled = true;
                
                await window.firebaseApp.firestore.addDoc(
                    window.firebaseApp.firestore.collection(window.firebaseApp.db, 'journalEntries'), 
                    {
                        title: title,
                        content: content,
                        timestamp: window.firebaseApp.firestore.serverTimestamp()
                    }
                );
                
                // Clear input fields
                nameInput.value = '';
                noteInput.value = '';
                charCount.textContent = '0';
                charCount.classList.remove('limit-warning');
                
                // Hide modal
                confirmationModal.style.display = 'none';
                
                // Show success feedback
                showSuccess('Your journal entry was saved successfully!');
                showToast('New entry added');
                
            } catch (error) {
                console.error('Error adding document: ', error);
                showError('There was an error saving your entry. Please try again.');
            } finally {
                submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Save Entry';
                submitBtn.disabled = false;
            }
        }

        // Show confirmation modal before posting
        submitBtn.addEventListener('click', () => {
            const title = nameInput.value.trim();
            const content = noteInput.value.trim();
            
            if (title === '' || content === '') {
                showError('Please enter both a title and journal content');
                return;
            }
            
            confirmationModal.style.display = 'flex';
        });

        confirmPostBtn.addEventListener('click', postEntry);
        
        cancelPostBtn.addEventListener('click', () => {
            confirmationModal.style.display = 'none';
        });

        // Search and filter functionality
        searchInput.addEventListener('input', () => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                filterEntries();
            }, 300);
        });

        filterSelect.addEventListener('change', filterEntries);

        function filterEntries() {
            const searchText = searchInput.value.toLowerCase();
            const filterValue = filterSelect.value;
            
            filteredEntries = allEntries.filter(entry => 
                entry.title.toLowerCase().includes(searchText) || 
                entry.content.toLowerCase().includes(searchText)
            );
            
            // Apply sorting
            if (filterValue === 'recent') {
                filteredEntries.sort((a, b) => b.timestamp - a.timestamp);
            } else if (filterValue === 'oldest') {
                filteredEntries.sort((a, b) => a.timestamp - b.timestamp);
            }
            
            displayEntries();
        }

        // Real-time listener for initial entries
        function setupEntriesListener() {
            if (unsubscribe) unsubscribe(); // Unsubscribe from previous listener
            
            showLoading();
            
            const q = window.firebaseApp.firestore.query(
                window.firebaseApp.firestore.collection(window.firebaseApp.db, 'journalEntries'),
                window.firebaseApp.firestore.orderBy('timestamp', 'desc'),
                window.firebaseApp.firestore.limit(12)
            );
            
            unsubscribe = window.firebaseApp.firestore.onSnapshot(q, (snapshot) => {
                allEntries = [];
                
                // Check if snapshot is empty
                if (snapshot.empty) {
                    // No documents in collection
                    hasMoreData = false;
                    filteredEntries = [];
                    displayEntries();
                    fullPageLoader.style.display = 'none';
                    isInitialLoad = false;
                    return;
                }
                
                snapshot.forEach(doc => {
                    const entryData = doc.data();
                    allEntries.push({ 
                        id: doc.id, 
                        ...entryData,
                        timestamp: entryData.timestamp ? entryData.timestamp.toDate() : new Date()
                    });
                });
                
                // Store the last visible document for pagination
                if (snapshot.docs.length > 0) {
                    lastVisible = snapshot.docs[snapshot.docs.length - 1];
                }
                
                // Check if there might be more data
                hasMoreData = snapshot.docs.length === 12;
                
                filteredEntries = [...allEntries];
                displayEntries();
                
                // Hide the full page loader once data is loaded
                fullPageLoader.style.display = 'none';
                isInitialLoad = false;
            }, error => {
                console.error('Error getting documents: ', error);
                showError('Error loading entries. Please try again later.');
                fullPageLoader.style.display = 'none';
                isInitialLoad = false;
            });
        }

        // Load more entries for lazy loading
        async function loadMoreEntries() {
            if (isLoading || !hasMoreData || isInitialLoad) return;
            
            isLoading = true;
            lazyLoading.style.display = 'block';
            
            try {
                const nextQuery = window.firebaseApp.firestore.query(
                    window.firebaseApp.firestore.collection(window.firebaseApp.db, 'journalEntries'),
                    window.firebaseApp.firestore.orderBy('timestamp', 'desc'),
                    window.firebaseApp.firestore.startAfter(lastVisible),
                    window.firebaseApp.firestore.limit(6)
                );
                    
                const nextSnapshot = await window.firebaseApp.firestore.getDocs(nextQuery);
                
                if (nextSnapshot.empty) {
                    hasMoreData = false;
                    lazyLoading.style.display = 'none';
                    noMorePosts.style.display = 'block';
                    return;
                }
                
                const newEntries = [];
                nextSnapshot.forEach(doc => {
                    const entryData = doc.data();
                    newEntries.push({ 
                        id: doc.id, 
                        ...entryData,
                        timestamp: entryData.timestamp ? entryData.timestamp.toDate() : new Date()
                    });
                });
                
                // Add new entries to existing arrays
                allEntries = [...allEntries, ...newEntries];
                filteredEntries = [...allEntries];
                
                // Update lastVisible for next pagination
                lastVisible = nextSnapshot.docs[nextSnapshot.docs.length - 1];
                
                // Check if there might be more data
                hasMoreData = nextSnapshot.docs.length === 6;
                
                // Reapply filters and display
                filterEntries();
                
            } catch (error) {
                console.error('Error loading more documents: ', error);
                showError('Error loading more entries.');
                lazyLoading.style.display = 'none';
            } finally {
                isLoading = false;
                if (hasMoreData) {
                    lazyLoading.style.display = 'none';
                }
            }
        }

        // Display entries in the UI
        function displayEntries() {
            if (filteredEntries.length === 0) {
                notesContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-book"></i>
                        <p>No journal entries found matching your search.</p>
                        <p>Try different keywords or write a new entry.</p>
                    </div>
                `;
                noteCount.textContent = '0';
                return;
            }
            
            noteCount.textContent = filteredEntries.length;
            
            // Render all filtered entries
            notesContainer.innerHTML = filteredEntries.map(entry => `
                <div class="journal-entry">
                    <div class="entry-header">
                        <span class="entry-title"><i class="fas fa-bookmark"></i> ${sanitizeInput(entry.title)}</span>
                        <span class="timestamp">${formatDate(entry.timestamp)}</span>
                    </div>
                    <div class="entry-content">${sanitizeInput(entry.content)}</div>
                </div>
            `).join('');
        }

        // Format Firestore timestamp
        function formatDate(timestamp) {
            if (!timestamp) return 'Just now';
            
            const now = new Date();
            const diffInSeconds = Math.floor((now - timestamp) / 1000);
            
            if (diffInSeconds < 60) return 'Just now';
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
            
            return timestamp.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Improved scroll handler with throttling
        function handleScroll() {
            if (scrollThrottleTimer) return;
            
            scrollThrottleTimer = setTimeout(() => {
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                const windowHeight = window.innerHeight;
                const documentHeight = document.documentElement.scrollHeight;
                
                // Load more when user scrolls to 90% of the page
                if (scrollTop + windowHeight >= documentHeight - 100) {
                    loadMoreEntries();
                }
                
                scrollThrottleTimer = null;
            }, 200);
        }

        // Initial setup
        document.addEventListener('DOMContentLoaded', () => {
            // Wait for Firebase to be available
            const checkFirebase = setInterval(() => {
                if (window.firebaseApp) {
                    clearInterval(checkFirebase);
                    setupEntriesListener();
                    
                    // Add scroll event listener for lazy loading
                    window.addEventListener('scroll', handleScroll);
                    
                    document.querySelectorAll('.journal-entry').forEach((card, index) => {
                        card.style.animationDelay = `${index * 0.1}s`;
                    });
                }
            }, 100);
    
            // If Firebase doesn't load after 5 seconds, show error
            setTimeout(() => {
                if (!window.firebaseApp) {
                    clearInterval(checkFirebase);
                    showError('Failed to load journal. Please refresh the page.');
                    fullPageLoader.style.display = 'none';
                }
            }, 5000);
        });

        // Reset lazy loading when searching/filtering
        searchInput.addEventListener('input', () => {
            // When searching, we want to reset pagination since we're working with filtered results
            hasMoreData = false;
            noMorePosts.style.display = 'none';
        });

        filterSelect.addEventListener('change', () => {
            hasMoreData = false;
            noMorePosts.style.display = 'none';
        });
    </script>
</body>
</html>
